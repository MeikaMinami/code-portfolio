//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""df70fa95-8a34-4494-b137-73ab6b9c7d37"",
            ""actions"": [
                {
                    ""name"": ""Bat_up"",
                    ""type"": ""Button"",
                    ""id"": ""ab1264e0-e176-49c2-95a8-bbd5f69f5b23"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bat_Right"",
                    ""type"": ""Button"",
                    ""id"": ""e507ba67-80e8-4575-bada-d90463e91105"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bat_Down"",
                    ""type"": ""Button"",
                    ""id"": ""01f52d10-3a80-479d-9eae-bc7fa89391ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bat_Left"",
                    ""type"": ""Button"",
                    ""id"": ""0537af2b-d842-423b-8586-46f87f46a25b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross_Left"",
                    ""type"": ""Button"",
                    ""id"": ""7fef589c-8fcb-4c1a-bc3e-c4bcb4e3639c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross_Up"",
                    ""type"": ""Button"",
                    ""id"": ""e091194b-fb05-4742-8b5e-6982731581b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross_Right"",
                    ""type"": ""Button"",
                    ""id"": ""8fc186d4-cc4a-4130-a12b-68d2c2e3783b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross_Down"",
                    ""type"": ""Button"",
                    ""id"": ""e0944691-9f2d-46d8-b4d7-06dcd9fd5f18"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LStick"",
                    ""type"": ""Value"",
                    ""id"": ""bf168858-6ea2-4282-83c2-423591ccfce1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LB"",
                    ""type"": ""Button"",
                    ""id"": ""e0d75401-feb2-4822-b99f-b7253b50493d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""83db7474-aa2a-4aa5-97b0-423f2a0c8dd0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e2caa57e-cb79-4d14-893a-e46a2105920e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75e28e9a-edd9-4fe5-9a6f-de1c4b10e0c9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Bat_up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ac4180e-480e-4b38-bc40-9d634dedd8f0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Bat_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d76b267-2dff-4b2e-82b1-d6171073e756"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Bat_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d2974a-1b34-4e95-a31d-afeafc6e8084"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Cross_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ad134a3-118d-4f28-81ab-498ea20bdcbe"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Cross_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c72c4318-c0c0-42b5-b41a-7d4b1383d670"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Cross_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12d29a69-c962-45fd-b631-203d7e74f192"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Cross_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8677624a-0066-4d41-a726-d3023cb96669"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LStick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d891d0e5-db7e-47f3-9209-7bce857afd21"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c0e3b781-c7ee-401b-9180-f1f2fc8cd58a"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49384e1e-33cd-46d3-bc1d-c7035fc4c65d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c2feaeae-d423-4602-8b73-1424c06459e9"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""976b0614-e256-4844-8d80-ea7c19830b0e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb9813d1-b153-4792-9fe1-335bec429cab"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c64f855-8a11-41d9-b22f-79915be237ba"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""785ae855-707b-4bef-9182-948f7739ab17"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Bat_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Bat_up = m_Player.FindAction("Bat_up", throwIfNotFound: true);
        m_Player_Bat_Right = m_Player.FindAction("Bat_Right", throwIfNotFound: true);
        m_Player_Bat_Down = m_Player.FindAction("Bat_Down", throwIfNotFound: true);
        m_Player_Bat_Left = m_Player.FindAction("Bat_Left", throwIfNotFound: true);
        m_Player_Cross_Left = m_Player.FindAction("Cross_Left", throwIfNotFound: true);
        m_Player_Cross_Up = m_Player.FindAction("Cross_Up", throwIfNotFound: true);
        m_Player_Cross_Right = m_Player.FindAction("Cross_Right", throwIfNotFound: true);
        m_Player_Cross_Down = m_Player.FindAction("Cross_Down", throwIfNotFound: true);
        m_Player_LStick = m_Player.FindAction("LStick", throwIfNotFound: true);
        m_Player_LB = m_Player.FindAction("LB", throwIfNotFound: true);
        m_Player_RB = m_Player.FindAction("RB", throwIfNotFound: true);
        m_Player_Menu = m_Player.FindAction("Menu", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Bat_up;
    private readonly InputAction m_Player_Bat_Right;
    private readonly InputAction m_Player_Bat_Down;
    private readonly InputAction m_Player_Bat_Left;
    private readonly InputAction m_Player_Cross_Left;
    private readonly InputAction m_Player_Cross_Up;
    private readonly InputAction m_Player_Cross_Right;
    private readonly InputAction m_Player_Cross_Down;
    private readonly InputAction m_Player_LStick;
    private readonly InputAction m_Player_LB;
    private readonly InputAction m_Player_RB;
    private readonly InputAction m_Player_Menu;
    public struct PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bat_up => m_Wrapper.m_Player_Bat_up;
        public InputAction @Bat_Right => m_Wrapper.m_Player_Bat_Right;
        public InputAction @Bat_Down => m_Wrapper.m_Player_Bat_Down;
        public InputAction @Bat_Left => m_Wrapper.m_Player_Bat_Left;
        public InputAction @Cross_Left => m_Wrapper.m_Player_Cross_Left;
        public InputAction @Cross_Up => m_Wrapper.m_Player_Cross_Up;
        public InputAction @Cross_Right => m_Wrapper.m_Player_Cross_Right;
        public InputAction @Cross_Down => m_Wrapper.m_Player_Cross_Down;
        public InputAction @LStick => m_Wrapper.m_Player_LStick;
        public InputAction @LB => m_Wrapper.m_Player_LB;
        public InputAction @RB => m_Wrapper.m_Player_RB;
        public InputAction @Menu => m_Wrapper.m_Player_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Bat_up.started += instance.OnBat_up;
            @Bat_up.performed += instance.OnBat_up;
            @Bat_up.canceled += instance.OnBat_up;
            @Bat_Right.started += instance.OnBat_Right;
            @Bat_Right.performed += instance.OnBat_Right;
            @Bat_Right.canceled += instance.OnBat_Right;
            @Bat_Down.started += instance.OnBat_Down;
            @Bat_Down.performed += instance.OnBat_Down;
            @Bat_Down.canceled += instance.OnBat_Down;
            @Bat_Left.started += instance.OnBat_Left;
            @Bat_Left.performed += instance.OnBat_Left;
            @Bat_Left.canceled += instance.OnBat_Left;
            @Cross_Left.started += instance.OnCross_Left;
            @Cross_Left.performed += instance.OnCross_Left;
            @Cross_Left.canceled += instance.OnCross_Left;
            @Cross_Up.started += instance.OnCross_Up;
            @Cross_Up.performed += instance.OnCross_Up;
            @Cross_Up.canceled += instance.OnCross_Up;
            @Cross_Right.started += instance.OnCross_Right;
            @Cross_Right.performed += instance.OnCross_Right;
            @Cross_Right.canceled += instance.OnCross_Right;
            @Cross_Down.started += instance.OnCross_Down;
            @Cross_Down.performed += instance.OnCross_Down;
            @Cross_Down.canceled += instance.OnCross_Down;
            @LStick.started += instance.OnLStick;
            @LStick.performed += instance.OnLStick;
            @LStick.canceled += instance.OnLStick;
            @LB.started += instance.OnLB;
            @LB.performed += instance.OnLB;
            @LB.canceled += instance.OnLB;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Bat_up.started -= instance.OnBat_up;
            @Bat_up.performed -= instance.OnBat_up;
            @Bat_up.canceled -= instance.OnBat_up;
            @Bat_Right.started -= instance.OnBat_Right;
            @Bat_Right.performed -= instance.OnBat_Right;
            @Bat_Right.canceled -= instance.OnBat_Right;
            @Bat_Down.started -= instance.OnBat_Down;
            @Bat_Down.performed -= instance.OnBat_Down;
            @Bat_Down.canceled -= instance.OnBat_Down;
            @Bat_Left.started -= instance.OnBat_Left;
            @Bat_Left.performed -= instance.OnBat_Left;
            @Bat_Left.canceled -= instance.OnBat_Left;
            @Cross_Left.started -= instance.OnCross_Left;
            @Cross_Left.performed -= instance.OnCross_Left;
            @Cross_Left.canceled -= instance.OnCross_Left;
            @Cross_Up.started -= instance.OnCross_Up;
            @Cross_Up.performed -= instance.OnCross_Up;
            @Cross_Up.canceled -= instance.OnCross_Up;
            @Cross_Right.started -= instance.OnCross_Right;
            @Cross_Right.performed -= instance.OnCross_Right;
            @Cross_Right.canceled -= instance.OnCross_Right;
            @Cross_Down.started -= instance.OnCross_Down;
            @Cross_Down.performed -= instance.OnCross_Down;
            @Cross_Down.canceled -= instance.OnCross_Down;
            @LStick.started -= instance.OnLStick;
            @LStick.performed -= instance.OnLStick;
            @LStick.canceled -= instance.OnLStick;
            @LB.started -= instance.OnLB;
            @LB.performed -= instance.OnLB;
            @LB.canceled -= instance.OnLB;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnBat_up(InputAction.CallbackContext context);
        void OnBat_Right(InputAction.CallbackContext context);
        void OnBat_Down(InputAction.CallbackContext context);
        void OnBat_Left(InputAction.CallbackContext context);
        void OnCross_Left(InputAction.CallbackContext context);
        void OnCross_Up(InputAction.CallbackContext context);
        void OnCross_Right(InputAction.CallbackContext context);
        void OnCross_Down(InputAction.CallbackContext context);
        void OnLStick(InputAction.CallbackContext context);
        void OnLB(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
